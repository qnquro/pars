# NewsEasyBotHandlers.py
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

# —Ç—É—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞, –ö—Ä–∏—Å—Ç–∏–∞–Ω —à–∞—Ä–∏—Ç –∑–∞ –≤—Å—ë, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏: show_news, next_page, prev_page. –≤ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è. —Ç–∞–º –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ

import NewsEasyBotKeyboards as kb
from DB.manageDB import get_news, get_news_count # –∏–∑ —Ñ–∞–π–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

router = Router()

# –•—Ä–∞–Ω–∏–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_news_messages = {}


# ----------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}!</b>", parse_mode="html",
                        reply_markup=kb.start)


# ----------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–ù–æ–≤–æ—Å—Ç–∏)
@router.message(F.text == "üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞")
async def info(message: Message):
    await message.reply("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–û –Ω–∞—Å)
@router.message(F.text == "üí°–û –Ω–∞—Åüí°")
async def onas(message: Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Pythonists")


# ----------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data Inline-–∫–Ω–æ–ø–æ–∫ (main)
@router.callback_query(F.data == "smotr")
async def show_news(callback: CallbackQuery):
    await callback.message.edit_text("<b>üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>", parse_mode="html")
    await callback.message.answer("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º –≤—Å–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news = get_news()
    total_news = get_news_count()
    total_pages = (total_news + 9) // 10  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

    if not news:
        await callback.message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç :(")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_id = callback.from_user.id
    user_news_messages[user_id] = sent_messages

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_msg = await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}",
        reply_markup=kb.get_pagination_keyboard(0, total_pages)
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    user_news_messages[user_id].append(pagination_msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("next_"))
async def next_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_news_messages:
        for msg_id in user_news_messages[user_id]:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        del user_news_messages[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    offset = (page + 1) * 10
    news = get_news(offset=offset)
    total_news = get_news_count()
    total_pages = (total_news + 9) // 10

    if not news:
        await callback.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_news_messages[user_id] = sent_messages

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_msg = await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 2} –∏–∑ {total_pages}",
        reply_markup=kb.get_pagination_keyboard(page + 1, total_pages)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    user_news_messages[user_id].append(pagination_msg.message_id)
    await callback.answer()


@router.callback_query(F.data.startswith("prev_"))
async def prev_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_news_messages:
        for msg_id in user_news_messages[user_id]:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        del user_news_messages[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    offset = (page - 1) * 10
    news = get_news(offset=offset)
    total_news = get_news_count()
    total_pages = (total_news + 9) // 10

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_news_messages[user_id] = sent_messages

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_msg = await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
        reply_markup=kb.get_pagination_keyboard(page - 1, total_pages)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    user_news_messages[user_id].append(pagination_msg.message_id)
    await callback.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
@router.callback_query(F.data == "sort")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


@router.callback_query(F.data == "news")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)", parse_mode="html", reply_markup=kb.back2)


@router.callback_query(F.data == "kluch")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)", parse_mode="html",
                                     reply_markup=kb.back1)


@router.callback_query(F.data == "ist")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)", parse_mode="html", reply_markup=kb.back1)


@router.callback_query(F.data == "oba")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)", parse_mode="html",
                                     reply_markup=kb.back1)


@router.callback_query(F.data == "back")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


@router.callback_query(F.data == "back1")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


@router.callback_query(F.data == "back2")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.main)