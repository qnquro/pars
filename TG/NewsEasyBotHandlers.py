from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import NewsEasyBotKeyboards as kb
from DB.manageDB import get_news, get_news_count

router = Router()

# –•—Ä–∞–Ω–∏–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_news_messages = {}

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


# ----------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}!</b>", parse_mode="html",
                        reply_markup=kb.start)


# ----------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–ù–æ–≤–æ—Å—Ç–∏)
@router.message(F.text == "üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞")
async def info(message: Message):
    await message.reply("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–û –Ω–∞—Å)
@router.message(F.text == "üí°–û –Ω–∞—Åüí°")
async def onas(message: Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Pythonists")


# ----------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def show_filtered_news(message_or_callback, page=0, edit=False):
    user_id = message_or_callback.from_user.id

    if user_id not in user_states:
        user_states[user_id] = {'source': None, 'keyword': None}

    source = user_states[user_id].get('source')
    keyword = user_states[user_id].get('keyword')

    offset = page * 10
    news = get_news(limit=10, offset=offset, source=source, keyword=keyword)
    total_news = get_news_count(source=source, keyword=keyword)
    total_pages = (total_news + 9) // 10

    if not news:
        await message_or_callback.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç :(")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id in user_news_messages:
        for msg_id in user_news_messages[user_id]:
            try:
                await message_or_callback.bot.delete_message(
                    message_or_callback.message.chat.id if edit else message_or_callback.chat.id, msg_id)
            except:
                pass
        del user_news_messages[user_id]

    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        content_preview = f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += content_preview
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        if len(news_text) > 4000:
            news_text = news_text[:4000] + "... (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–æ—Ä–æ—á–µ–Ω–æ)"
        print(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(news_text)}")
        if edit:
            msg = await message_or_callback.bot.send_message(message_or_callback.message.chat.id, news_text,
                                                             parse_mode="HTML")
        else:
            msg = await message_or_callback.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    user_news_messages[user_id] = sent_messages

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    callback_prefix = f"pag_{'s' if source else ''}{'k' if keyword else ''}_"
    pagination_msg = await message_or_callback.bot.send_message(
        message_or_callback.message.chat.id if edit else message_or_callback.chat.id,
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}",
        reply_markup=kb.get_pagination_keyboard(page, total_pages, prefix=callback_prefix)
    )
    user_news_messages[user_id].append(pagination_msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
@router.callback_query(F.data == "smotr")
async def show_news(callback: CallbackQuery):
    await callback.message.edit_text("<b>üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>", parse_mode="html")
    await callback.message.answer("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º –≤—Å–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news = get_news()
    total_news = get_news_count()
    total_pages = (total_news + 9) // 10  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

    if not news:
        await callback.message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç :(")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_id = callback.from_user.id
    user_news_messages[user_id] = sent_messages

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_msg = await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}",
        reply_markup=kb.get_pagination_keyboard(0, total_pages)
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    user_news_messages[user_id].append(pagination_msg.message_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@router.callback_query(F.data == "sort")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@router.callback_query(F.data == "kluch")
async def sort_by_keyword(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {'state': 'waiting_keyword', 'source': None, 'keyword': None}
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=kb.back1)


@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get(
    'state') == 'waiting_keyword')
async def receive_keyword(message: Message):
    user_id = message.from_user.id
    keyword = message.text.strip()
    user_states[user_id]['keyword'] = keyword
    user_states[user_id]['state'] = None
    await message.answer(f"–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'...")
    await show_filtered_news(message)


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
@router.callback_query(F.data == "ist")
async def sort_by_source(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb.sources_keyboard)


@router.callback_query(F.data.startswith("source_"))
async def select_source(callback: CallbackQuery):
    source = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_states[user_id] = {'source': source, 'keyword': None}
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
    await show_filtered_news(callback, edit=True)


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@router.callback_query(F.data == "oba")
async def sort_by_source_and_keyword(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {'state': 'select_source_for_oba'}
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb.sources_keyboard)


@router.callback_query(lambda query: query.from_user.id in user_states and user_states[query.from_user.id].get(
    'state') == 'select_source_for_oba' and query.data.startswith("source_"))
async def select_source_for_oba(callback: CallbackQuery):
    source = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_states[user_id]['source'] = source
    user_states[user_id]['state'] = 'waiting_keyword_for_oba'
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")


@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get(
    'state') == 'waiting_keyword_for_oba')
async def receive_keyword_for_oba(message: Message):
    user_id = message.from_user.id
    keyword = message.text.strip()
    user_states[user_id]['keyword'] = keyword
    user_states[user_id]['state'] = None
    await message.answer(
        f"–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É '{user_states[user_id]['source']}' –∏ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'...")
    await show_filtered_news(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
# Updated handlers for pagination in NewsEasyBotHandlers.py

@router.callback_query(lambda c: 'next_' in c.data)
async def next_page(callback: CallbackQuery):
    parts = callback.data.split("_")
    next_index = parts.index('next')
    page = int(parts[next_index + 1])
    await show_filtered_news(callback, page=page + 1, edit=True)
    await callback.answer()

@router.callback_query(lambda c: 'prev_' in c.data)
async def prev_page(callback: CallbackQuery):
    parts = callback.data.split("_")
    prev_index = parts.index('prev')
    page = int(parts[prev_index + 1])
    if page > 0:
        await show_filtered_news(callback, page=page - 1, edit=True)
    await callback.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
@router.callback_query(F.data == "news")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)", parse_mode="html", reply_markup=kb.back2)


@router.callback_query(F.data == "back")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


@router.callback_query(F.data == "back1")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


@router.callback_query(F.data == "back2")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.main)